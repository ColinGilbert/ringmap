#!/bin/bash

WHERE=$1
PACKET_LENGTH=$2
PACKET_COUNT=$3
DRIVER=$4

# Patterns 
CPU_LOAD_PATTERN=\^user:\.\*idle:
# Positions in cpusage output for awk
CPU_USER_POS=2
CPU_NICE_POS=8
CPU_SYST_POS=6
CPU_IDLE_POS=4

PPS_PATTERN=pps\.\*Mb\.\sec
PPS_POS=1

MBS_PATTERN=pps\.\*Mb\.\sec
MBS_POS=3

CAPTURED_PATTERN=\^Captured:\.\*pkts
CAPTURED_POS=2

MISSED_PATTERN=\^Missed\.\*kets
MISSED_POS=4

KERN_WAIT_PATTERN=\^Kernel\.\*user
KERN_WAIT_POS=7

USER_WAIT_PATTERN=\^Capturing\.\*kernel
USER_WAIT_POS=7

INTR_NUM_PATTERN=\^Number\.\*inter
INTR_NUM_POS=4

BUFFER_PATTERN=\^Buffer:
BUFFER_POS=2

TIME_PATTERN=\^Capturing\.\*sec
TIME_POS=3

# Vars for script 
FILE_PARAMS=${PACKET_LENGTH}"_testsparam"

if [ $# -lt 4 ] 
then 	
	echo "Wrong input parameters number!"
	echo "Usage: "$0" path pkt_length pkt_count driver"
	exit 1
fi 

if [ ! -r ${FILE_PARAMS} ] 
then 
	echo "File withe tests params is missing: "${FILE_PARAMS}
	exit 1
fi

[ ! -d results ] && mkdir results

function get_buffer_fill_from_file() {
	echo $(./get_values ${BUFFER_PATTERN} ${BUFFER_POS} ${1})
}

function get_cap_time_from_file() {
	echo $(./get_values ${TIME_PATTERN} ${TIME_POS} ${1})
}

function get_kern_wait_from_file {
	echo $(./get_values ${KERN_WAIT_PATTERN} ${KERN_WAIT_POS} ${1})
}

function get_user_wait_from_file {
	echo $(./get_values ${USER_WAIT_PATTERN} ${USER_WAIT_POS} ${1})
}

function get_pps_from_file() {
	echo $(./get_values ${PPS_PATTERN} ${PPS_POS} ${1})
}

function get_mbs_from_file() {
	echo $(./get_values ${MBS_PATTERN} ${MBS_POS} ${1})
}

function get_sysload_from_file() {
	echo $(./get_values ${CPU_LOAD_PATTERN} ${CPU_SYST_POS} ${1})
}

function get_captured_from_file() {
	echo $(./get_values ${CAPTURED_PATTERN} ${CAPTURED_POS} ${1})
}

function get_missed_from_file() {
	cap=$(get_captured_from_file ${1})
	[ ${cap} -gt ${PACKET_COUNT} ] && cap=${PACKET_COUNT}

	echo ${PACKET_COUNT} ${cap} | awk '{printf "%.2f", $1 - $2}'
}

function get_intrnum_from_file() {
	echo $(./get_values ${INTR_NUM_PATTERN} ${INTR_NUM_POS} ${1})
}

function is_file_ok() {
	cat $1 | grep ${CAPTURED_PATTERN} > /dev/null || return 1
}

function compute_stats() {
	filename=$1
	what=$2
	info=$3

	for try in 1 2 3 4 5 
	do
		f=${WHERE}"/"${PACKET_LENGTH}"/"${try}"/"${filename}

		if [ ! -r ${f} ] && [ $info = 0 ]
		then
			echo 0
			return 
		fi


		if [ -r $f ]
		then
			grep ${CAPTURED_PATTERN} ${f} > /dev/null || continue
		fi

		case ${what} in 
			
		captured )
			val_info="Captured\ Packets"
			[ $info = 1 ] && break

			cap=$(get_captured_from_file ${f})
			[ ${cap} -gt ${PACKET_COUNT} ] && cap=${PACKET_COUNT}

			values[try]=${cap}
			;;

		missed )
			val_info="Dropped\ Packets"
			[ $info = 1 ] && break

			values[try]=$(get_missed_from_file ${f})
			;;

		missed_bytes )
			val_info="Dropped\ Bytes"
			[ $info = 1 ] && break

			values[try]=$(echo  $(get_missed_from_file ${f}) ${PACKET_LENGTH} | awk '{printf "%.2f", $1 * $2}')
			;;

		missed_perc )
			val_info="Dropped\ Packets\ Percentage"
			[ $info = 1 ] && break

			missd=$(get_missed_from_file ${f})
			values[try]=$(echo ${PACKET_COUNT} ${missd} | awk '{printf "%.2f", (100 * $2) / $1}')
			;;

		sysload )
			val_info="System\ Load\ Percentage"
			[ $info = 1 ] && break

			values[try]=$(get_sysload_from_file ${f})
			;;

		pps )
			val_info="Packet\ Rate\ \(pkt/s\)"
			[ $info = 1 ] && break

			values[try]=$(get_pps_from_file ${f})
			;;

		mbs )
			val_info="Bit\ Rate\ \(Mbit/s\)"
			[ $info = 1 ] && break

			values[try]=$(get_mbs_from_file ${f})
			;;

		intrnum )
			val_info="Interrupts\ Number"
			[ $info = 1 ] && break

			values[try]=$(get_intrnum_from_file ${f})
			;;

		intrnum_rate )
			val_info="Interrupts\ Rate\ \(per\ sec\)"
			[ $info = 1 ] && break

			sek=$(get_cap_time_from_file ${f})
			intrnum=$(get_intrnum_from_file ${f})
			if [ ${sek} = 0 ]
			then 
				values[try]=intrnum
			else
				values[try]=$(echo ${intrnum} ${sek} | awk '{printf "%.2f", $1 / $2}' )
			fi 
			;;

		pkt_intr )
			val_info="Captured\ Packets\ per\ Interrupt"
			[ $info = 1 ] && break

			pkts=$(get_captured_from_file ${f})
			intrn=$(get_intrnum_from_file ${f})
			values[try]=$(echo ${pkts} ${intrn} | awk '{printf "%.2f", $1 / $2}')
			;;

		bytes_intr )
			val_info="Bytes\ Captured\ per\ Interrupt"
			[ $info = 1 ] && break

			pkts=$(get_captured_from_file ${f})
			intrn=$(get_intrnum_from_file ${f})
			bytes=$(echo ${pkts} ${PACKET_LENGTH} | awk '{printf "%.2f", $1 * $2}')
			values[try]=$(echo ${bytes} ${intrn} | awk '{printf "%.2f", $1 / $2}')
			;;

		pkt_rate )
			val_info="Capturing\ Packets\ Rate \(pkts/sec\)"
			[ $info = 1 ] && break

			sek=$(get_cap_time_from_file ${f})

			cap=$(get_captured_from_file ${f})
			[ ${cap} -gt ${PACKET_COUNT} ] && cap=${PACKET_COUNT}
			
			if [ ${sek} = 0 ]
			then 
				values[try]=cap
			else
				values[try]=$(echo ${cap} ${sek} | awk '{printf "%.2f", $1 / $2}' )
			fi
			;;

		bytes_rate )
			val_info="Capturing\ Bytes\ Rate \(Bytes/sec\)"
			[ $info = 1 ] && break

			sek=$(get_cap_time_from_file ${f})

			cap=$(get_captured_from_file ${f})
			[ ${cap} -gt ${PACKET_COUNT} ] && cap=${PACKET_COUNT}

			bytes=$(echo ${cap} ${PACKET_LENGTH} | awk '{printf "%.2f", $1 * $2}')
			if [ ${sek} = 0 ]
			then 
				values[try]=${bytes}
			else
				values[try]=$(echo ${bytes} ${sek} | awk '{printf "%.2f", $1 / $2}' )
			fi
			;;

		kern_wait )
			val_info="Times\ Wait\ For\ User\ Process"
			[ $info = 1 ] && break

			values[try]=$(get_kern_wait_from_file ${f})
			;;

		buffer_fill )
			val_info="Packets\ in\ Buffer\ \(average\)"
			[ $info = 1 ] && break

			values[try]=$(get_buffer_fill_from_file ${f})
			;;

		mis_wait )
			val_info="Dropped\ Packets\ per\ Wait"
			[ $info = 1 ] && break

			pmiss=$(get_missed_from_file ${f})
			kwaitu=$(get_kern_wait_from_file ${f})
			[ ${kwaitu} = 0 ] && values[try]=0 || \
			values[try]=$(echo ${pmiss} ${kwaitu} | awk '{printf "%.2f", $1 / $2}')
			;;
		
		cap_time )
			val_info="Time\ Between\ First\ and\ Last\ Captured\ Packets\ \(sec\)"
			[ $info = 1 ] && break

			values[try]=$(get_cap_time_from_file ${f})
			;;

		* )
			echo "Wrong command"
			exit 1
			;;
		esac

	done

	if [ $info = 1 ]
	then 
		echo $val_info
	else 
		echo $(./get_arithm_mean ${values[*]})  $(./get_varianz ${values[*]}) $(./get_median ${values[*]})
	fi
}

function create_table() {
	val_list=$@
	pos=1

	DIST=-15

	for n in $val_list
	do 
		name=$(compute_stats "a" ${n} 1)
		echo  $pos" - " $n ": " $name
		echo  $(( $pos + 1 )) " - " ${n}_med " : " ${name} " - median"  
		echo  $(( $pos + 2 )) " - " ${n}_dev " : " ${name} " - deviation"

		names[$(( $pos ))]=$n
		names[$(( $pos + 1 ))]=${n}_med
		names[$(( $pos + 2 ))]=${n}_dev
		
		pos=$(( $pos + 3 ))
		echo
	done 

	echo 
	echo
	echo TABLE:
	echo 

	echo ${names[*]}
	echo 


	while read line 
	do 
		g=$(echo $line | awk '{print $1}')
		s=$(echo $line | awk '{print $2}')

		fn=${PACKET_LENGTH}"_"${g}"_"${s}"_"${PACKET_COUNT}

		for n in ${params[*]} 
		do
			ttt=$(compute_stats ${fn} ${n} 0) 
			val=$(echo ${ttt} | awk '{print $1}')
			dev=$(echo ${ttt} | awk '{print $2}')
			med=$(echo ${ttt} | awk '{print $3}')
			printf "%s %s %s " ${val} ${med} ${dev}
		done
		printf "\n\n"
	done < ${FILE_PARAMS}
}

if [ ${DRIVER} = ringmap ]
then 
	params=(mbs pps captured missed cap_time missed_perc missed_bytes sysload intrnum  pkt_intr bytes_intr kern_wait buffer_fill)
else
	params=(mbs pps captured missed missed_perc missed_bytes sysload cap_time)
fi

create_table ${params[*]}

exit 0
