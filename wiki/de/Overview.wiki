#summary About Project.
#sidebar TableOfContents
<wiki:toc max_depth="1" />

= Einleitung =
Paket-Capturing oder _Sniffing_ ist der Prozess des Abfangens von
Netzwerkpaketen, mit dem Ziel diese zu speichern, zu analysieren und
darzustellen. Aufgrund der limitierten Rechnerleistung und Ineffizienz der
Software, kommt es leider oft dazu, dass nicht alle Pakete aus dem Netz
untersucht werden können.

Die Hardwareressourcen eines Computers wie Bandbreite der internen Bussen,
CPU-Zyklen-Rate und Speicher (RAM und Hintergrundspeicher) sind begrenzt. Das
hat zur Folge, dass die Menge der ankommenden Paketen, die ein Computer pro
Zeitintervall bearbeiten und speichern kann, auch nicht unendlich groß ist.
Die "Geschwindigkeit" des Datentransports zwischen einem  Peripherie-Gerät
und RAM  ist durch die Bandbreite des Bussystem begrenzt. Die Anzahl der im RAM
befindlichen Pakete, die sich pro Zeitintervall bearbeiten bzw.
filtern lässt ist sowohl von der Leistung  des Prozessorbusses als auch von der
CPU-Leistung abhängig. Wenn die empfangenen Pakete auf die Festplatte
geschrieben werden sollen, geschieht dies auch nicht schneller, als es der
Hintergrundspeicher erlaubt. Jede von den obengenannten Hardwarebegrenzungen
kann Datenverluste bei Capturing verursachen, wenn die Rate der ankommenden
Pakete über die Performance-Grenzen der darunterliegenden Hardwarekomponenten
steigt.

Aber nicht nur die Hardware stellt einen Flaschenhals für die Datenbearbeitung
in einem Rechnersystem dar. Die Hardwareressourcen können von der Software
ineffektiv benutzt werden. Zum Beispiel: wenn ein Programm wesentlich mehr
Operationen ausführt, als zur Lösung des Problems nötig wären, dann erzeugt es
einen unnötig hohe Systemlast und reduziert damit die Datenmengen, die es in
einem Zeitintervall bearbeiten könnte.
 
Das Ziel dieser Diplomarbeit ist es, die für Capturing relevante Komponente des
Betriebssystem FreeBSD zu untersuchen, die potentiellen "Engstellen" in der
Software, die zu den Datenverlusten führen können,  herauszufinden, und
effiziente Algorithmen zur Erhöhung des Datendurchsatzes und Reduzierung der
Systemauslates beim Capturing zu erarbeiten und zu implementieren.


= Definitions = 
*Packet capturing stack* (the software used for capturing packets): 
 * Network adapter driver
 * Software to analyze and filter received packets
  * [http://en.wikipedia.org/wiki/Berkeley_Packet_Filter Berkeley Packet Filter]
 * Software to  access received packets from user-space
  * mostly based on _[http://www.tcpdump.org/ libpcap]_ library 

= Project Goal =
Implement new software components for efficient packet capturing at 1G (and [http://code.google.com/p/ringmap/wiki/Google_Summer_of_Code_2010#1._Porting_ringmap_to_10GbE_Intel_Network_Adapters in the future 10G]) in [http://www.freebsd.org FreeBSD] while  minimizing CPU-load and packet loss. These components are realized as the new (*ringmap*) *FreeBSD packet capturing stack*:
 * New network driver. Now based on *[http://www.freebsd.org/cgi/man.cgi?query=em&manpath=FreeBSD+7.0-RELEASE em]* driver, but in the future on *[http://www.freebsd.org/cgi/man.cgi?query=ixgb&manpath=FreeBSD+7.0-RELEASE ixgb]* for 10G capturing
 * New *libpcap*-functions for accessing packets by using *ringmap* driver. 
 * System calls to control the capturing

The new implemented software must be transparent for user-space applications. Namely, each application that uses _libpcap_ for packet capturing shouldn't require modification in order to run with the new *ringmap* network driver and new modified _libpcap_. 

= Requirements =
== Hardware ==
 * *[http://en.wikipedia.org/wiki/X86 x86]* or *[http://en.wikipedia.org/wiki/X86-64 x86-64]* - microprocessor architecture
 * One of the following Intel Gigabit Ethernet Adapters:
  * _82540EP/EM, 82541xx, 82544GC/EI, 82545GM/EM, 82546GB/EB, 82547xx_

== Software == 
 * FreeBSD-*7.x*, - *8.x*, *i386*-Kernel
 * *em*, *igb*, *ixgb* drivers for Intel GbE adapters
  * must be [http://www.freebsd.org/doc/en/books/handbook/kernelconfig.html compiled and installed as module]
