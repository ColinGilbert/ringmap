#summary My proposal for Google Summer of Code 2010

<wiki:toc max_depth="2" />

= Personal Data =
||Name:||Alexandre Fiveg||
||Email:||alexandre@net.t-labs.tu-berlin.de||
||Phone:||+491629485320||
||Availability:||30 hours per week||
||Begin:||I would like to begin at 1 May||

<br>

= Bio =
Currently I am a student at the University of Technology Berlin, Germany. Last
year in context of working on [http://code.google.com/p/ringmap ringmap]-Project I implemented the software components for FreeBSD (kernel- and
user-space) for efficient packet capturing in high-speed networks.  While
working on this project, I greatly increased my strength in C programming and
my experience with FreeBSD kernel programming, especially with respect to
network drivers.  Moreover during my study I have acquired a good theoretical
knowledges of _operating systems_ and _computer networks_.  

My practical skills are mainly:
 * Programming languages: C, Shell, Python
 * Operating systems: Linux, FreeBSD
 * Revision control systems: svn, cvs

<br>

= Mentors =
||Name:||Robert Watson||
||Mail:|| rwatson@FreeBSD.org||

<br>

= Project Information =

== Project Title ==
*Ringmap Capturing Stack for High Performance Packet Capturing in FreeBSD*

== Project Description ==
Packet capturing in high-speed networks is not an easy task due to the system
limitations like RAM and system bus throughput. Unfortunately, it is often
impossible to capture every packet arriving at a network interface.  Hardware
may not be the only bottleneck, however, as inefficient software is also to
blame for poor resources usage and resulting packet loss during capture.

The new *ringmap* capturing stack for FreeBSD already allows on commodity
hardware for efficient capturing at 1GBit/sec with very low packet loss and low
system load. With Intel 1GbE cards and 64 bytes packets, ringmap is able to capture up to 700 Mbit/sec with only 0.02% loss (maximal) and a system load of under 12%. Under similar conditions, the standard capturing software of FreeBSD-7.x generates a system load of up to 100% and results in up to 100% packet loss. 

Like in "zero-copy BPF" implementation, the idea is to eliminate packet copy operations by using shared memory buffers. However, unlike the "zero-copy BPF" model, ringmap eliminates all packet copies during capturing:
the network adapter's DMA buffer is mapped directly into the user-space. Ringmap also adapts _libpcap_ accordingly to provide user-space applications with access to the captured packets without any additional overhead.

In the context of the GSoC-2010 I will continue developing ringmap packet
capturing stack and I have to achieve the following three goals:

 # Porting ringmap to 10GbE Intel network adapter drivers
 # Porting the ringmap capturing stack to FreeBSD-8
 # Measurements and performance comparison between the standard packet capturing stack of FreeBSD-8 and ringmap.



=== What I Plan To Do In Order To Achieve These Goals ===

==== 1. Porting Ringmap To 10gbe Intel Network Adapter Drivers ====

The ringmap software stack based currently on em-driver and is usable only with
Intel 1Gb Ethernet Adapters. The goal is therefore, to modify the ringmap
capturing stack for the 10Gb Ethernet Intel network adapters based on 82598 and
82599 processors.
To achieve this goal the next steps are:
 * Understand the functionality of 10GbE Intel controllers
 * Understand and analyze the code from *ixgbe* driver
 * Porting of the ringmap code to ixgbe

I'm planning at first to split out the existing ringmap code into
hardware-dependent and hardware-independent code. It has to be done because the
currently ringmap code was implemented  only for em-driver and only for one
type of Ethernet controllers and as a result the hardware-dependent and
-independent data placed together in the same structures. This will first be
done by splitting the data scructures and then the functions.  Moreover, I have
to extend the existing data structures to make the ringmap code more portable. 

After that I will begin porting the ringmap functions to ixgbe-driver.  To
do it, I will first insert the "hooks" for ringmap
functionalities into the ixgbe-driver code  (through #ifdef). It should be: 
 * Init hook:
  * Will be placed in the "attach" function of ixgbe driver. 
 * Uninit hook:
  * Will be placed in the "detach" function of ixgbe driver
 * Interrupt hooks: 
  * Multiple hooks that will be placed in the code of ixgbe that is executed as result of an packet receive interrupt.

The first places where I will port the ringmap functions are "attach" and
"detach" functions of ixgbe-driver. These function must in addition to their
ordinary work be able to allocate and deallocate the ringmap data structures
properly. After this step I will begin porting most complicated part of
code, that has to be executed as a result of interrupt.

While porting the driver there may appear some difficulties due to the
differences between the 1Gb and 10Gb adapters. In this connection, before
starting the work I have  to carefully study functionality of the 10G Intel
controller, with a strong emphasis of DMA- and interrupt-functionality, and
find differences which affect changing of the driver code.


==== 2. Porting The Ringmap Capturing Stack To FreeBSD-8 ====

At the present time, ringmap can be run only on FreeBSD-*7.x*. The task here
would be to port the existing code base to FreeBSD-*8.x*. The porting effort
would involve both the driver and libpcap source code.


==== 3. Measurements And Performance Comparison Between The Standard Packet Capturing Stack Of FreeBSD-8 And Ringmap ====

For this part of work I deployed ready a tesbed network of three hosts and I
implemented the software for tests control and measurements:

 # *Traffic Generator Host*. With multiple network interfaces. OS Linux.
  * Software: 
   * pktgen module to generate network traffic
   * shell-script to control the pktgen module in order to generate traffics with different packet rates and packet lengths.
 # *Capturing Host.* Os FreeBSD.
  * Software:
   * _libpcap_-based application for packet capturing
   * shell-scripts for system load measurement 

 # *Test Control Host.* OS Linux.
  * Software:
   * shell-scripts for the central coordination of tests

<br>

== Project Schedule ==

For the whole work I plan 13 weeks.

 # Porting ringmap to 10Gb
  * 4 weeks.
  * The bare minimum I want to achieve is the 10GbE driver for FreeBSD-7. This also is the primary goal of this GSoC-2010 at any cost.
 # Functionality Test
  * 2 weeks.
  * Functionality test and debugging of 10Gb ringmap capturing stack.
 # Porting ringmap to FreeBSD-8
  * 1-2 weeks.
  * This step will be the port to FreeBSD-8, but it requires step 1 to be finished (at least the coding part, but not necessarily all testing work)
 # Functionality Test
  * 1 week.
  * Functionality test and debugging of FreeBSD-8 ringmap capturing stack.
  * *CODING PART DEADLINE! At the end of 9th week*
 # Performance Test
  * 2 weeks.
  * Conducting performance analysis and evaluation between the standard packet capturing stack of FreeBSD-8 and ringmap. To achieving this goal will be several computers for generating of traffic together used in order to reach higher than 1Gibt/sec traffic.
 # Documentation
  * 2 weeks. 
  * Documentation and cosmetic debugging of ringmap
  * *PROJECT DEADLINE! At the end of 13th week *

<br>

== Support ==
The hardware infrastructure and testbed for implementation and testing will
be provided by the research group Intelligent Networks at the University of
Technology in Berlin

*The technical contact is:*<br>
Jan Böttger (Boettger)<br>
mail : jan@net.t-labs.tu-berlin.de<br>
phone: +49 (0)30 8353 58516<br>
University of Technology Berlin, Germany<br>